# Load-balanced nginx configuration for Work-Util
# This configuration supports multiple backend instances for high availability

# Define upstream backend servers
upstream backend_servers {
    # Load balancing method (default is round-robin)
    # Options: round-robin, least_conn, ip_hash, random
    least_conn;
    
    # Backend servers
    server 127.0.0.1:8000 weight=3 max_fails=3 fail_timeout=30s;
    server 127.0.0.1:8001 weight=2 max_fails=3 fail_timeout=30s;
    server 127.0.0.1:8002 weight=1 max_fails=3 fail_timeout=30s;
    
    # Backup server (used only when all primary servers are down)
    server 127.0.0.1:8003 backup;
    
    # Keep alive connections to backend
    keepalive 32;
}

# Define upstream frontend servers (if using multiple frontend instances)
upstream frontend_servers {
    server 127.0.0.1:3000;
    server 127.0.0.1:3001;
    
    keepalive 16;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/s;
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

# HTTP to HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name next-exit.me www.next-exit.me;
    return 301 https://$server_name$request_uri;
}

# HTTPS server with load balancing
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name next-exit.me www.next-exit.me;
    
    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/next-exit.me/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/next-exit.me/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Connection limits
    limit_conn conn_limit 100;
    
    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Root directory for React build
    root /var/www/work-util;
    index index.html;
    
    # Enable compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/json application/xml+rss;
    
    # React SPA routing - serve index.html for all routes
    location / {
        try_files $uri $uri/ /index.html;
        
        # Cache control for HTML (React SPA)
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }
    
    # Static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|otf)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }
    
    # API endpoints with load balancing
    location /api/ {
        # Rate limiting for API
        limit_req zone=api_limit burst=200 nodelay;
        
        # Proxy to backend servers
        proxy_pass http://backend_servers/api/;
        proxy_http_version 1.1;
        
        # Proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Backend keep-alive
        proxy_set_header Connection "";
        proxy_http_version 1.1;
        
        # Buffering settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # CORS headers
        add_header Access-Control-Allow-Origin "$http_origin" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
        add_header Access-Control-Allow-Credentials "true" always;
        
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }
    
    # Authentication endpoints with stricter rate limiting
    location /api/auth/ {
        # Stricter rate limiting for auth endpoints
        limit_req zone=auth_limit burst=10 nodelay;
        
        proxy_pass http://backend_servers/api/auth/;
        proxy_http_version 1.1;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Security for auth endpoints
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;
    }
    
    # WebSocket support (if needed)
    location /ws/ {
        proxy_pass http://backend_servers/ws/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Disable buffering for WebSocket
        proxy_buffering off;
    }
    
    # Health check endpoint for monitoring
    location /health {
        access_log off;
        
        # Check backend health
        location /health/backend {
            proxy_pass http://backend_servers/api/health;
            proxy_set_header Host $host;
            access_log off;
        }
        
        # nginx health
        location /health/nginx {
            return 200 "nginx is healthy\n";
            add_header Content-Type text/plain;
            access_log off;
        }
    }
    
    # Server status (restrict access in production)
    location /nginx_status {
        stub_status on;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        deny all;
        access_log off;
    }
    
    # Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Custom error pages
    error_page 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}